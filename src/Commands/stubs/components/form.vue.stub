<template>
    <div>

        <DummyModelVariable-nav-bar-component></DummyModelVariable-nav-bar-component>

        <div class="wrapper wrapper-content animated fadeInRight">

            <div class="row">
                <div class="col-lg-12">
                    <div class="ibox">

                        <div class="ibox-title">
                            <h5>{{ isCreateMode ? $t('labels.register_mode') : $t('labels.edition_mode') }}</h5>
                        </div>
                        <div class="ibox-content">

                            <form v-on:keyup.enter="save">
DummyHtml

                                <div class="form-row">
                                    <div class="form-group col-12">

                                        <div class="btn-group">
                                            <button class="btn btn-primary" type="button" @click.prevent="save">
                                                <i class="fa fa-check"></i> {{ $t('buttons.save_and_back') }}
                                            </button>
                                            <button type="button"
                                                    class="btn btn-primary dropdown-toggle dropdown-toggle-split"
                                                    data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                <span class="sr-only">Toggle Dropdown</span>
                                            </button>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" href="javascript:" v-on:click="saveAndNew">
                                                    {{ $t('buttons.save_and_new') }}
                                                </a>
                                            </div>
                                        </div>
                                        <router-link class="btn btn-white" :to="{ name: 'panel.DummyModulePlural.list' }">
                                            <i class="fa fa-ban"></i> {{ $t('buttons.cancel') }}
                                        </router-link>

                                    </div>
                                </div>
                            </form>

                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
    import DummyModelClassNavBarComponent from "./DummyModelClassNavBarComponent";
    import FormErrorComponent from "../../../../../../resources/js/components/layout/bootstrap/FormErrorComponent";

    export default {
        name: "DummyModelClassFormComponent",
        components: {FormErrorComponent, DummyModelClassNavBarComponent},
        data() {
            return {
                urlToSave: "/api/DummyModulePlural",
                routeList: "panel.DummyModulePlural.list",
                routeCreate: "panel.DummyModulePlural.create",
                redirectToRoute: "",
                method: "POST",
                form: {},
                errors: {},
                isCreateMode: true,
            }
        },
        methods: {
            getData() {

                this.$loading(true);

                axios.get(this.urlToSave)
                    .then((response) => {

                        this.form = response.data.data;
                    })
                    .catch(error => {

                        if (_.has(error, 'error.response.status')) {

                            let message = '[' + error.response.status + '] ' + this.$root.$t('messages.server_error');
                            this.$awn.alert(message);

                        } else {

                            this.$awn.alert(error.message);
                        }

                    })
                    .then(() => {

                        this.$loading(false);
                    });
            },
            saveAndNew() {

                this.redirectToRoute = this.routeCreate;
                this.save();
            },
            save() {

                this.$loading(true);

                this.errors = {};
                this.form._method = this.method;

                axios.post(this.urlToSave, this.form)
                    .then(response => {

                        this.$router.push({name: this.redirectToRoute})
                            .catch(err => {
                            })
                            .then(() => {

                                this.form = {};
                                this.redirectToRoute = this.routeList;
                            });

                        this.$awn.success(this.$root.$t('messages.saved_successfully'));
                    })
                    .catch(error => {

                        if (_.has(error, 'response.data.errors')) {

                            this.$awn.warning(this.$root.$t('messages.server_error'));
                            this.errors = error.response.data.errors;
                        } else {

                            let message = '[' + error.response.status + '] ' + this.$root.$t('messages.server_error');
                            this.$awn.alert(message);
                        }

                        //console.log(error);
                    })
                    .then(() => {

                        this.$loading(false);
                    });
            }
        },
        mounted() {

            if (typeof (this.$route.params.id) !== "undefined") {

                this.isCreateMode = false;
                this.urlToSave = this.urlToSave + "/" + this.$route.params.id;
                this.method = 'PUT';
                this.getData();
            }

            this.redirectToRoute = this.routeList;
        }
    }
</script>

<style scoped>

</style>
