<?php

declare(strict_types=1);

namespace DummyControllerNamespace;

use Exception;
use Illuminate\Http\JsonResponse;
use DummyFullDefaultControllerClass;
use DummyFullServiceClass;
use DummyFullStoreRequestClass;
use DummyFullUpdateRequestClass;
use DummyFullModelClass;
use DummyFullResourceClass;
use DummyFullCollectionClass;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;

class DummyControllerClass extends ApiController
{

    private $DummyServiceVariable;

    /**
     * Create a new controller instance.
     *
     * @param DummyServiceClass $DummyServiceVariable
     */
    public function __construct(DummyServiceClass $DummyServiceVariable)
    {

        //$this->middleware('jwt.auth');
        $this->DummyServiceVariable = $DummyServiceVariable;
    }

    /**
     * Display a listing of the resource.
     *
     * @return JsonResponse
     */
    public function index(): JsonResponse
    {

        try {

            if (!Auth::user()->can('viewAny', DummyModelClass::class)) {

                return $this->sendUnauthorized();
            }

            $limit = (int)(request('limit') ?? 20);
            $data = $this->DummyServiceVariable->paginate($limit);

            return $this->sendPaginate(new DummyModelClassCollection($data));

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);

        }
    }

    /**
     * Display a listing of the resource.
     *
     * @return JsonResponse
     */
    public function all(): JsonResponse
    {

        try {

            if (!Auth::user()->can('viewAny', DummyModelClass::class)) {

                return $this->sendUnauthorized();
            }

            $data = $this->DummyServiceVariable->all();

            return $this->sendResource(DummyModelClassResource::collection($data));

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @return JsonResponse
     */
    public function store()
    {

        try {

            if (!Auth::user()->can('create', DummyModelClass::class)) {

                return $this->sendUnauthorized();
            }

            $storeRequest = new DummyModelClassStoreRequest();
            $validator = Validator::make(request()->all(), $storeRequest->rules());

            if ($validator->fails()) {

                return $this->sendBadRequest('Validation Error.', $validator->errors()->toArray());
            }

            $item = $this->DummyServiceVariable->create(request()->all());

            return $this->sendResponse($item->toArray());

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);

        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param DummyModelClass $DummyModelVariable
     * @return JsonResponse
     */
    public function update(DummyModelClass $DummyModelVariable)
    {
        try {

            if (!Auth::user()->can('update', $DummyModelVariable)) {

                return $this->sendUnauthorized();
            }

            $updateRequest = new DummyModelClassUpdateRequest();
            $validator = Validator::make(request()->all(), $updateRequest->rules());

            if ($validator->fails()) {

                return $this->sendBadRequest('Validation Error.', $validator->errors()->toArray());
            }

            $item = $this->DummyServiceVariable->update(request()->all(), $DummyModelVariable);

            return $this->sendResponse($item->toArray());

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);

        }
    }

    /**
     * Display the specified resource.
     *
     * @param DummyModelClass $DummyModelVariable
     * @return JsonResponse
     */
    public function show(DummyModelClass $DummyModelVariable): JsonResponse
    {

        try {

            if (!Auth::user()->can('show', $DummyModelVariable)) {

                return $this->sendUnauthorized();
            }

            return $this->sendResource(new DummyModelClassResource($DummyModelVariable));

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);

        }
    }

    /**
     * Display the specified resource.
     *
     * @param DummyModelClass $DummyModelVariable
     * @return JsonResponse
     */
    public function delete(DummyModelClass $DummyModelVariable): JsonResponse
    {

        try {

            $item = $this->DummyServiceVariable->find($id);

            if (!Auth::user()->can('delete', $item)) {

                return $this->sendUnauthorized();
            }

            return $this->sendResource(new DummyModelClassResource($item));

        } catch (Exception $exception) {

            return $this->sendError('Server Error.', $exception);

        }
    }
}
